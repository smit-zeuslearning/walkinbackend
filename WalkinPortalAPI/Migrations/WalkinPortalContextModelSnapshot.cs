// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalkinPortalAPI.Models;

#nullable disable

namespace WalkinPortalAPI.Migrations
{
    [DbContext(typeof(WalkinPortalContext))]
    partial class WalkinPortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("apartment");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HouseNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("house_no");

                    b.Property<string>("Landmark")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("landmark")
                        .HasDefaultValueSql("'N/A'");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ContactNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryCode")
                        .HasColumnType("int")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_number");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("contact_number", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AggregatePercentage")
                        .HasColumnType("int")
                        .HasColumnName("aggregate_percentage");

                    b.Property<string>("CollegeLocation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("college_location");

                    b.Property<string>("CollegeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("college_name");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EducationStream")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("education_stream");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<int>("PassingYear")
                        .HasColumnType("int")
                        .HasColumnName("passing_year");

                    b.Property<string>("Qualification")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("qualification");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("education", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ExpertisedTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Angularjs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("angularjs")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Javascript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("javascript")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<bool?>("Nodejs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nodejs")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Other")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other")
                        .HasDefaultValueSql("'N/A'");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("professional_qualification_id");

                    b.Property<bool?>("Reactjs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("reactjs")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "professional_qualification_id");

                    b.ToTable("expertised_technologies", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.FamalierTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Angularjs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("angularjs")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Javascript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("javascript")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<bool?>("Nodejs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nodejs")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Other")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("other")
                        .HasDefaultValueSql("'N/A'");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("professional_qualification_id");

                    b.Property<bool?>("Reactjs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("reactjs")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "professional_qualification_id")
                        .HasDatabaseName("professional_qualification_id1");

                    b.ToTable("famalier_technologies", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<int>("SelectedPreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("selected_preference_id");

                    b.Property<int>("SelectedTimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("selected_time_slot_id");

                    b.Property<byte[]>("UpdatedResume")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("updated_resume");

                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("users_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobPostId" }, "job_post_id");

                    b.HasIndex(new[] { "SelectedPreferenceId" }, "selected_preference_id");

                    b.HasIndex(new[] { "SelectedTimeSlotId" }, "selected_time_slot_id");

                    b.HasIndex(new[] { "UsersId" }, "users_id");

                    b.ToTable("job_application", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("InstructionalDesignDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("instructional_design_description_id");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<int>("SoftwareEngineerDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("software_engineer_description_id");

                    b.Property<int>("SoftwareQualityEngineerDesriptionId")
                        .HasColumnType("int")
                        .HasColumnName("software_quality_engineer_desription_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AddressId" }, "address_id");

                    b.HasIndex(new[] { "InstructionalDesignDescriptionId" }, "instructional_design_description_id");

                    b.HasIndex(new[] { "SoftwareEngineerDescriptionId" }, "software_engineer_description_id");

                    b.HasIndex(new[] { "SoftwareQualityEngineerDesriptionId" }, "software_quality_engineer_desription_id");

                    b.ToTable("job_post", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobRoleDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GrossPackage")
                        .HasColumnType("int")
                        .HasColumnName("gross_package");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("job_role_description", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.PreferredJobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("InstructionalDesigner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("instructional_designer")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<bool?>("SoftwareEnginner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("software_enginner")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("SoftwareQualityEngineer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("software_quality_engineer")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("preferred_job_role", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ProfessionalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppledRoldLast12months")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appled_rold_last_12months")
                        .HasDefaultValueSql("'N/A'");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("application_type");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastWorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("last_working_date");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<bool>("OnOnticePeriod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("on_ontice_period");

                    b.Property<int?>("TerminationNoticeMonths")
                        .HasColumnType("int")
                        .HasColumnName("termination_notice_months");

                    b.Property<int>("TotalExperience")
                        .HasColumnType("int")
                        .HasColumnName("total_experience");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool>("ZeusTestLast12months")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("zeus_test_last_12months");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("professional_qualification", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EndTime")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("end_time");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int")
                        .HasColumnName("job_post_id");

                    b.Property<DateTime?>("ModefiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modefied_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModefiedDate"));

                    b.Property<string>("StartTime")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobPostId" }, "job_post_id")
                        .HasDatabaseName("job_post_id1");

                    b.ToTable("time_slots", (string)null);
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayPicture")
                        .HasColumnType("longtext")
                        .HasColumnName("display_picture");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("GetJobUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("get_job_update")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("ModifiedDate"));

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("Resume")
                        .HasColumnType("longtext")
                        .HasColumnName("resume");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ContactNumber", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.Education", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ExpertisedTechnology", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.ProfessionalQualification", null)
                        .WithMany("ExpertisedTechnologies")
                        .HasForeignKey("ProfessionalQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.FamalierTechnology", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.ProfessionalQualification", null)
                        .WithMany("FamalierTechnologies")
                        .HasForeignKey("ProfessionalQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobApplication", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("job_application_ibfk_3");

                    b.HasOne("WalkinPortalAPI.Models.PreferredJobRole", "SelectedPreference")
                        .WithMany("JobApplications")
                        .HasForeignKey("SelectedPreferenceId")
                        .IsRequired()
                        .HasConstraintName("job_application_ibfk_1");

                    b.HasOne("WalkinPortalAPI.Models.TimeSlot", "SelectedTimeSlot")
                        .WithMany("JobApplications")
                        .HasForeignKey("SelectedTimeSlotId")
                        .IsRequired()
                        .HasConstraintName("job_application_ibfk_4");

                    b.HasOne("WalkinPortalAPI.Models.User", "Users")
                        .WithMany("JobApplications")
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("job_application_ibfk_2");

                    b.Navigation("JobPost");

                    b.Navigation("SelectedPreference");

                    b.Navigation("SelectedTimeSlot");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobPost", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.Address", "Address")
                        .WithMany("JobPosts")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("job_post_ibfk_1");

                    b.HasOne("WalkinPortalAPI.Models.JobRoleDescription", "InstructionalDesignDescription")
                        .WithMany("JobPostInstructionalDesignDescriptions")
                        .HasForeignKey("InstructionalDesignDescriptionId")
                        .IsRequired()
                        .HasConstraintName("job_post_ibfk_2");

                    b.HasOne("WalkinPortalAPI.Models.JobRoleDescription", "SoftwareEngineerDescription")
                        .WithMany("JobPostSoftwareEngineerDescriptions")
                        .HasForeignKey("SoftwareEngineerDescriptionId")
                        .IsRequired()
                        .HasConstraintName("job_post_ibfk_3");

                    b.HasOne("WalkinPortalAPI.Models.JobRoleDescription", "SoftwareQualityEngineerDesription")
                        .WithMany("JobPostSoftwareQualityEngineerDesriptions")
                        .HasForeignKey("SoftwareQualityEngineerDesriptionId")
                        .IsRequired()
                        .HasConstraintName("job_post_ibfk_4");

                    b.Navigation("Address");

                    b.Navigation("InstructionalDesignDescription");

                    b.Navigation("SoftwareEngineerDescription");

                    b.Navigation("SoftwareQualityEngineerDesription");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.PreferredJobRole", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany("PreferredJobRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ProfessionalQualification", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.User", null)
                        .WithMany("ProfessionalQualifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.TimeSlot", b =>
                {
                    b.HasOne("WalkinPortalAPI.Models.JobPost", "JobPost")
                        .WithMany("TimeSlots")
                        .HasForeignKey("JobPostId")
                        .IsRequired()
                        .HasConstraintName("time_slots_ibfk_1");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.Address", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobPost", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.JobRoleDescription", b =>
                {
                    b.Navigation("JobPostInstructionalDesignDescriptions");

                    b.Navigation("JobPostSoftwareEngineerDescriptions");

                    b.Navigation("JobPostSoftwareQualityEngineerDesriptions");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.PreferredJobRole", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.ProfessionalQualification", b =>
                {
                    b.Navigation("ExpertisedTechnologies");

                    b.Navigation("FamalierTechnologies");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.TimeSlot", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("WalkinPortalAPI.Models.User", b =>
                {
                    b.Navigation("ContactNumbers");

                    b.Navigation("Educations");

                    b.Navigation("JobApplications");

                    b.Navigation("PreferredJobRoles");

                    b.Navigation("ProfessionalQualifications");
                });
#pragma warning restore 612, 618
        }
    }
}
